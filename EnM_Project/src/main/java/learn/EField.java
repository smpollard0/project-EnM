/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package learn;

import java.awt.Graphics;
import java.awt.Color;
import java.util.*;
import java.lang.Math.*;
import com.mathlibrary.integral.Integral;

/**
 *
 * @author Spencer Pollard, CSU Chico Department of Physics
 */

public class EField extends javax.swing.JFrame {

    Graphics graphics;
    
    final double permittivity = 8.85418782E-12;
    final double pi = 3.14159265358979;
    final double zero = 0.0;
    
    /**
     * Creates new form EField
     */
    public EField() {
        initComponents();
        graphics = playArea.getGraphics();
    }

    class pointCharge {
        int xloc;
        int yloc;
        double charge;
        int xD;
        int yD;
        
        // Parameterized constructor with all 3 values
        pointCharge(int x, int y, double passedCharge, int xDrawLoc, int yDrawLoc){
            xloc = x;
            yloc = y;
            charge = passedCharge;
            xD = xDrawLoc;
            yD = yDrawLoc;
        }
        
        // Parameterized constructor with only the charge
        pointCharge(double passedCharge){
            xloc = 0;
            yloc = 0;
            charge = passedCharge;
            xD = 0;
            yD = 0;
        }
    }// class definition
    
    Vector<pointCharge> chargeList = new Vector<>();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        positiveBag = new java.awt.Panel();
        negativeBag = new java.awt.Panel();
        btnPlaceCharge = new javax.swing.JButton();
        playArea = new java.awt.Panel();
        xloc = new javax.swing.JTextField();
        yloc = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        charge = new javax.swing.JTextField();
        calculateEfield = new javax.swing.JButton();
        chargeMultiplier = new javax.swing.JComboBox<>();
        clearButton = new javax.swing.JButton();
        resultsBoxY = new javax.swing.JLabel();
        resultsBoxX = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        positiveBag.setBackground(new java.awt.Color(255, 0, 0));
        positiveBag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                positiveBagMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                positiveBagMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout positiveBagLayout = new javax.swing.GroupLayout(positiveBag);
        positiveBag.setLayout(positiveBagLayout);
        positiveBagLayout.setHorizontalGroup(
            positiveBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        positiveBagLayout.setVerticalGroup(
            positiveBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        negativeBag.setBackground(new java.awt.Color(0, 0, 255));
        negativeBag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                negativeBagMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                negativeBagMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout negativeBagLayout = new javax.swing.GroupLayout(negativeBag);
        negativeBag.setLayout(negativeBagLayout);
        negativeBagLayout.setHorizontalGroup(
            negativeBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        negativeBagLayout.setVerticalGroup(
            negativeBagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        btnPlaceCharge.setText("Place Charge");
        btnPlaceCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceChargeActionPerformed(evt);
            }
        });

        playArea.setBackground(new java.awt.Color(210, 210, 210));

        javax.swing.GroupLayout playAreaLayout = new javax.swing.GroupLayout(playArea);
        playArea.setLayout(playAreaLayout);
        playAreaLayout.setHorizontalGroup(
            playAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        playAreaLayout.setVerticalGroup(
            playAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 588, Short.MAX_VALUE)
        );

        xloc.setToolTipText("X-Value");
        xloc.setPreferredSize(new java.awt.Dimension(100, 24));

        yloc.setPreferredSize(new java.awt.Dimension(100, 24));

        jLabel1.setText("X Coordinate");

        jLabel2.setText("Y Coordinate");

        charge.setPreferredSize(new java.awt.Dimension(100, 24));

        calculateEfield.setText("Calculate");
        calculateEfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateEfieldActionPerformed(evt);
            }
        });

        chargeMultiplier.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "pC", "nC", "Î¼C", "mC", "C", "kC", "MC" }));

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        resultsBoxY.setBackground(new java.awt.Color(210, 210, 210));

        resultsBoxX.setBackground(new java.awt.Color(210, 210, 210));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(positiveBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(negativeBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(xloc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(charge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yloc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(chargeMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(calculateEfield)
                            .addComponent(btnPlaceCharge)
                            .addComponent(clearButton)
                            .addComponent(resultsBoxY, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resultsBoxX, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(51, 51, 51)
                .addComponent(playArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(positiveBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(negativeBag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(xloc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(yloc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(charge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chargeMultiplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addComponent(btnPlaceCharge)
                        .addGap(18, 18, 18)
                        .addComponent(calculateEfield)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resultsBoxX, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resultsBoxY, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton)))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void positiveBagMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_positiveBagMousePressed
        // TODO add your handling code here:
        System.out.println("Positive bag pressed");
    }//GEN-LAST:event_positiveBagMousePressed

    private void positiveBagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_positiveBagMouseReleased
        // TODO add your handling code here:
        System.out.println("Positive bag released");
    }//GEN-LAST:event_positiveBagMouseReleased

    private void negativeBagMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_negativeBagMousePressed
        // TODO add your handling code here:
        System.out.println("Negative bag pressed");
    }//GEN-LAST:event_negativeBagMousePressed

    private void negativeBagMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_negativeBagMouseReleased
        // TODO add your handling code here:
        System.out.println("Negative bag released");
    }//GEN-LAST:event_negativeBagMouseReleased

    private void btnPlaceChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceChargeActionPerformed
        // Declare and initialize variables
        int diameter = 30;
        double chargeValue = Double.parseDouble(charge.getText());
        var xDrawLoc = 10*Integer.parseInt(xloc.getText()) + playArea.getWidth()/2 - diameter/4;
        var yDrawLoc = 0 - 10*Integer.parseInt(yloc.getText()) + playArea.getHeight()/2 - diameter/4;
        var x = Integer.parseInt(xloc.getText()) + playArea.getWidth()/2 - diameter/4;
        var y = 0 - Integer.parseInt(yloc.getText()) + playArea.getHeight()/2 - diameter/4;
        boolean testFound = false;
        
        // Switch statement to get right magnitude of switch statement based on the value in the dropdown box
        switch (chargeMultiplier.getSelectedItem().toString()){
            case "pC":
                chargeValue *= Math.pow(10, -12);
                break;
            case "nC":
                chargeValue *= Math.pow(10, -9);
                break;
            case "Î¼C":
                chargeValue *= Math.pow(10, -6);
                break;
            case "C":
                break;
            case "mC":
                chargeValue *= Math.pow(10, -3);
                break;
            case "kC":
                chargeValue *= Math.pow(10, 3);
                break;
            case "MC":
                chargeValue *= Math.pow(10,6);
                break;
        }
        
        // CURRENT: REDRAW PLAYING FIELD TO MOVE POINT CHARGE
        if (0 == Double.compare(chargeValue, zero)){
            // for loop to check if test charge already exists
            for (pointCharge Q: chargeList){
                // if it does exist, change location of test charge
                if (0 == Double.compare(Q.charge, zero)){
                    System.out.println("Test charge already placed");
                    testFound = true;
                    chargeList.remove(Q);
                    pointCharge temp = new pointCharge(x, y, chargeValue, xDrawLoc, yDrawLoc);
                    chargeList.addElement(temp);
                
                    // redraw the whole playing field to move the test charge
                    Color background = new Color(210,210,210);
                    graphics.setColor(background);
                    graphics.fillRect(0,0,566,588);
                    graphics.drawRect(0, 0 ,566, 588);
                    
                    // for loop to redraw the charge configuration
                    for (pointCharge q: chargeList){
                        if (q.charge > 0){
                            graphics.setColor(Color.RED);
                        }// if
                        else if (q.charge < 0){
                            graphics.setColor(Color.BLUE);
                        }// else if 
                        else{
                            graphics.setColor(Color.BLACK);
                        }
                        graphics.fillOval(q.xD, q.yD, diameter, diameter);
                        graphics.setColor(Color.BLACK);
                        graphics.drawOval(q.xD, q.yD, diameter, diameter);
                    }// inner for
                
                    break;
                }// if
            }// for
        }// if
        
        
        // else, place the test charge like normal
        
        if (!testFound){
            // Create point charge and add it to the list of all charges
            pointCharge temp = new pointCharge(x, y, chargeValue, xDrawLoc, yDrawLoc);
            chargeList.addElement(temp);
        
            if (Double.parseDouble(charge.getText()) > 0){
                graphics.setColor(Color.RED);
                graphics.fillOval(xDrawLoc, yDrawLoc, diameter, diameter);
                graphics.setColor(Color.BLACK);
                graphics.drawOval(xDrawLoc, yDrawLoc, diameter, diameter);
            }// if
        
            else if (Double.parseDouble(charge.getText()) < 0){
                graphics.setColor(Color.BLUE);
                graphics.fillOval(xDrawLoc, yDrawLoc, diameter, diameter);
                graphics.setColor(Color.BLACK);
                graphics.drawOval(xDrawLoc, yDrawLoc, diameter, diameter);
            }// if
        
            else {
                graphics.setColor(Color.BLACK);
                graphics.fillOval(xDrawLoc, yDrawLoc, diameter, diameter);
                graphics.setColor(Color.BLACK);
                graphics.drawOval(xDrawLoc, yDrawLoc, diameter, diameter);
            }// else if
        }// if
        
    }//GEN-LAST:event_btnPlaceChargeActionPerformed

    private void calculateEfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateEfieldActionPerformed

        // declare and initialize variables
        double eFieldx = 0.0;
        double eFieldy = 0.0;
        double xDif = 0.0;
        double yDif = 0.0;
        double separationR = 0.0;
        pointCharge testCharge = new pointCharge(0);
            
        // find the test charge in the list of charges
        for (pointCharge Q : chargeList){
            if (Q.charge == 0.0){
                testCharge = Q;
            }// if
        }// for
            
        // Sum the contribution of electric field of each particle at the test point
        for (pointCharge Q : chargeList){
            if (Q.charge != 0.0){
                xDif = testCharge.xloc - Q.xloc;
                yDif = testCharge.yloc - Q.yloc;
                double xDif2 = Math.pow(xDif, 2);
                double yDif2 = Math.pow(yDif, 2);
            
                separationR = Math.sqrt(xDif2 + yDif2);
                
                eFieldx += (Q.charge * xDif) / (Math.pow(separationR,3));
                eFieldy += (Q.charge * yDif) / Math.pow(separationR, 3);
            }// if
        }// for 
        
        eFieldx *= (1/(4*pi*permittivity));
        eFieldy *= (1/(4*pi*permittivity));
        
        // output results to the console
        System.out.println("Efieldx: " + eFieldx);
        System.out.println("Efieldy: " + eFieldy);
        resultsBoxX.setText("Efieldx: " + eFieldx + "N/C");
        resultsBoxY.setText("Efieldy: " + eFieldy + "N/C");
        
        /* testing imported integration package
        Integral test = new Integral("x^2");
        try {
            System.out.println(test.simpson(0,1));
        } catch (Exception e){
            System.out.println("Error with simpson integration");
        }// catch
        */
        
        
    }//GEN-LAST:event_calculateEfieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // redraw the whole playing field to move the test charge
        Color background = new Color(210,210,210);
        graphics.setColor(background);
        graphics.fillRect(0,0,566,588);
        graphics.drawRect(0, 0 ,566, 588);
        chargeList.clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EField.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EField().setVisible(true);
            }
        });
        
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlaceCharge;
    private javax.swing.JButton calculateEfield;
    private javax.swing.JTextField charge;
    private javax.swing.JComboBox<String> chargeMultiplier;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.Panel negativeBag;
    private java.awt.Panel playArea;
    private java.awt.Panel positiveBag;
    private javax.swing.JLabel resultsBoxX;
    private javax.swing.JLabel resultsBoxY;
    private javax.swing.JTextField xloc;
    private javax.swing.JTextField yloc;
    // End of variables declaration//GEN-END:variables
}
